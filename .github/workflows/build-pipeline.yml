# AIDE Cross-Platform Build & Deploy Pipeline
#
# This workflow is now ACTIVE. It will run automatically on pushes and pull requests to the main branch.

name: AIDE Cross-Platform Build

on:
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Grant write permissions for contents (to push to branches) and packages (for GHCR).
permissions:
  contents: write
  packages: write

jobs:
  # Job 0: Run linting and type-checking first. This is a quality gate.
  lint:
    name: Lint & Type-Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate package-lock.json
        run: npm install --package-lock-only

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      # Run the lint script, which performs a TypeScript type check without emitting files.
      - name: Run linter
        run: npm run lint

  # Job 1: Build the core web assets. This job is the foundation for all subsequent parallel builds.
  build_web:
    name: Build Web Assets
    needs: lint # This job will only run if the 'lint' job succeeds.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate package-lock.json
        run: npm install --package-lock-only

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      # This step builds the static web app into the 'www' directory, which is Capacitor's web asset source.
      - name: Build web assets
        run: npm run build:web
        env:
          # The bundler needs the API key to embed it in the final code for the client.
          # You MUST set this as a secret in your repository settings.
          API_KEY: ${{ secrets.API_KEY_PLACEHOLDER }}

      # Upload the 'www' directory as an artifact so that other, parallel jobs can download and use it.
      - name: Upload web assets artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-assets
          path: www

  # Job 2: Build the Docker image. This runs in parallel with other platform builds.
  build_docker:
    name: Build Docker Image
    needs: build_web # Depends on the web assets being built first.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download web assets artifact
        uses: actions/download-artifact@v4
        with:
          name: web-assets
          path: www

      - name: Set repository name to lowercase
        run: echo "repo_lc=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.json
          push: true
          tags: ghcr.io/${{ env.repo_lc }}:${{ github.sha }}

  # Job 3: Build desktop executables for Windows, macOS, and Linux using a matrix strategy for parallel builds.
  build_desktop:
    name: Build Desktop App (${{ matrix.os }})
    needs: build_web # This job can't start until the web assets are ready.
    if: github.event_name == 'workflow_dispatch' # This job will only run on manual triggers.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate package-lock.json
        run: npm install --package-lock-only

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      # Download the web assets that were built and uploaded in the previous job.
      - name: Download web assets artifact
        uses: actions/download-artifact@v4
        with:
          name: web-assets
          path: www # Electron is configured to look in 'www' for the index.html file.

      # Run the correct build script based on the runner's operating system.
      - name: Build Electron app for Linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:linux

      - name: Build Electron app for Windows
        if: matrix.os == 'windows-latest'
        run: npm run build:win

      - name: Build Electron app for macOS
        if: matrix.os == 'macos-latest'
        run: npm run build:macos
        env:
          # macOS builds require code signing for distribution. Add these secrets to your repository.
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Push Desktop Artifact to Branch
        shell: bash
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          OS_NAME=${{ matrix.os }}
          BRANCH_NAME="dev-builds/desktop-${OS_NAME}"
          
          # Find the artifact file
          ARTIFACT_PATH=$(find dist -maxdepth 1 -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" \))
          if [ -z "$ARTIFACT_PATH" ]; then
            echo "Error: No build artifact found in dist/ directory."
            exit 1
          fi
          echo "Found artifact: $ARTIFACT_PATH"
          
          ARTIFACT_FILENAME=$(basename "$ARTIFACT_PATH")
          
          # Secure the artifact by moving it out of the repo
          mv "$ARTIFACT_PATH" "/tmp/$ARTIFACT_FILENAME"
          
          # Create a new, clean branch
          git checkout --orphan "$BRANCH_NAME"
          
          # Clean the working directory completely
          git rm -rf .
          git clean -fdx
          
          # Bring the artifact back, commit, and force-push
          mv "/tmp/$ARTIFACT_FILENAME" .
          git add "$ARTIFACT_FILENAME"
          git commit -m "Desktop build for ${{ matrix.os }} from commit ${{ github.sha }}"
          git push --force origin "$BRANCH_NAME"

  # Job 4: Build the native Android App Bundle (AAB) or a fallback APK.
  build_android_appbundle:
    name: Build Android App (AAB/APK)
    needs: build_web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate package-lock.json
        run: npm install --package-lock-only

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Install dependencies
        run: npm install
      - name: Download web assets artifact
        uses: actions/download-artifact@v4
        with:
          name: web-assets
          path: www

      - name: Add Capacitor Android platform
        run: npx capacitor add android

      - name: Configure native permissions
        run: npm run configure:native
        
      - name: Make gradlew executable
        run: chmod +x android/gradlew

      # These steps configure the build for release signing if secrets are present.
      - name: Decode Android Keystore
        if: secrets.ENCODED_SIGNING_KEY
        run: echo "${{ secrets.ENCODED_SIGNING_KEY }}" | base64 --decode > android/upload-keystore.jks

      - name: Create Keystore Properties File
        if: secrets.ENCODED_SIGNING_KEY
        run: |
          echo "storeFile=upload-keystore.jks" > android/keystore.properties
          echo "storePassword=${{ secrets.SIGNING_KEY_STORE_PASSWORD }}" >> android/keystore.properties
          echo "keyAlias=${{ secrets.SIGNING_KEY_ALIAS }}" >> android/keystore.properties
          echo "keyPassword=${{ secrets.SIGNING_KEY_PASSWORD }}" >> android/keystore.properties
      
      # If secrets are provided, build a signed release AAB for the Play Store.
      - name: Build Android Release AAB
        if: secrets.ENCODED_SIGNING_KEY
        run: cd android && ./gradlew bundleRelease

      # As a fallback, build a debug APK if signing secrets are not available.
      - name: Build Android Debug APK (Fallback)
        if: '!secrets.ENCODED_SIGNING_KEY'
        run: cd android && ./gradlew assembleDebug

      - name: Push Android Artifact to Branch
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # Conditionally choose the artifact path and branch name based on which build ran.
          if [ -f "android/app/build/outputs/bundle/release/app-release.aab" ]; then
            BRANCH_NAME="dev-builds/android-aab"
            ARTIFACT_PATH="android/app/build/outputs/bundle/release/app-release.aab"
            COMMIT_MESSAGE="Signed Android AAB build from commit ${{ github.sha }}"
          else
            BRANCH_NAME="dev-builds/android-apk"
            ARTIFACT_PATH="android/app/build/outputs/apk/debug/app-debug.apk"
            COMMIT_MESSAGE="Debug Android APK build from commit ${{ github.sha }}"
          fi
          
          ARTIFACT_FILENAME=$(basename "$ARTIFACT_PATH")
          echo "Found artifact: $ARTIFACT_PATH"

          # Secure the artifact by moving it out of the repo
          mv "$ARTIFACT_PATH" "/tmp/$ARTIFACT_FILENAME"

          # Create a new, clean branch
          git checkout --orphan "$BRANCH_NAME"
          git rm -rf .
          git clean -fdx
          
          # Bring the artifact back, commit, and force-push
          mv "/tmp/$ARTIFACT_FILENAME" .
          git add "$ARTIFACT_FILENAME"
          git commit -m "$COMMIT_MESSAGE"
          git push --force origin "$BRANCH_NAME"

  # Job 5: Build the native iOS App.
  build_ios:
    name: Build iOS App
    needs: build_web
    runs-on: macos-latest # iOS builds MUST run on a macOS machine.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate package-lock.json
        run: npm install --package-lock-only

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Download web assets artifact
        uses: actions/download-artifact@v4
        with:
          name: web-assets
          path: www

      - name: Add Capacitor iOS platform
        run: npx capacitor add ios

      - name: Configure native permissions
        run: npm run configure:native

      - name: Update CocoaPods repositories
        run: pod repo update
        working-directory: ios/App

      - name: Install CocoaPods
        run: pod install
        working-directory: ios/App

      # Build an unsigned archive for CI. Signing is disabled to prevent "requires development team" errors.
      - name: Build iOS App (Archive)
        run: |
          set -o pipefail && xcodebuild -workspace ios/App/App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath $PWD/ios/App/App.xcarchive \
            archive CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
        env:
          # A team ID can be provided here for users who wish to enable signing later.
          APPLE_DEVELOPMENT_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Push iOS Archive to Branch
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          BRANCH_NAME="dev-builds/ios-app"
          
          # Zip the archive to create a single file artifact
          echo "Zipping the iOS archive..."
          zip -r App.xcarchive.zip ios/App/App.xcarchive
          
          ARTIFACT_PATH="App.xcarchive.zip"
          ARTIFACT_FILENAME=$(basename "$ARTIFACT_PATH")
          
          # Secure the artifact by moving it out of the repo
          mv "$ARTIFACT_PATH" "/tmp/$ARTIFACT_FILENAME"
          
          # Create a new, clean branch
          git checkout --orphan "$BRANCH_NAME"
          
          # Clean the working directory completely
          git rm -rf .
          git clean -fdx
          
          # Bring the artifact back, commit, and force-push
          mv "/tmp/$ARTIFACT_FILENAME" .
          git add "$ARTIFACT_FILENAME"
          git commit -m "iOS App Archive from commit ${{ github.sha }}"
          git push --force origin "$BRANCH_NAME"
